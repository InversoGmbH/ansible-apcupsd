---
# defaults file for apcupsd

# Enable facts deploiement
apcupsd__facts: true

# Choose the monitoring backend to configure (if available)
# apcupsd__monitoring:

# List of packages to install
apcupsd__packages_names:
  - apcupsd


### SERVICE CONFIGURATION
# ---------------------------------------
# The name of the system service
apcupsd__service_name: 'apcupsd@%i'

# Enable of not all instances services
apcupsd__service_enabled: true

# The master configuration directory
apcupsd__config_directory: /etc/apcupsd

# The configuration file of each apcupsd instance
apcupsd__configuration_file: '{{ apcupsd__config_directory }}/apcupsd.%i.conf'

# The service runtime directory
apcupsd__runtime_directory: /run/apcupsd.%i

# The logs directory
apcupsd__logs_directory: /var/log/apcupsd

# State directory
apcupsd__lib_directory: /var/lib/apcupsd

# Apcaccess executable
apcupsd__apcaccess_executable: /usr/bin/env apcaccess

# Path to pid file per instances
apcupsd__service_pidfile: '/var/run/apcupsd.%i.pid'

# command line options for apcaccess
apcupsd__apcaccess_options: >-
  {% if apcupsd__net_server|bool %}
  -h {{ apcupsd__net_server_address }}:{{ apcupsd__net_server_port }}
  {% endif %}


### MONITORING
# ---------------------------------------

## Prometheus monitoring
# Which exporter version do you want
apcupsd_exporter__version: 0.1.0

# Hostname on which prometheus exporter per instance will listen on
apcupsd_exporter__web_listen_host: ''

# Starting port number on which prometheus exporter per instance will listen on
apcupsd_exporter__web_listen_port: 9162

# Url prefix on which prometheus exporter will serve metrics
apcupsd_exporter__web_path: /metrics

# Network stack to use in prometheus exporter
apcupsd_exporter__network: tcp


### APCUPSD INSTANCES CONFIGURATION
# ---------------------------------------
# Dict of dhcpd instances
apcupsd__instances:
  ups1:
    scripts:
      - name: default
        event: all
        content: |
          #!/bin/sh

          APCUPSD=/sbin/apcupsd
          SHUTDOWN=/sbin/shutdown
          WALL=wall

          case "$1" in
              killpower)
              echo "Apccontrol doing: ${APCUPSD} --killpower on UPS ${2}" | (${WALL} 2>/dev/null || cat)
              sleep 10
              ${APCUPSD} --killpower
              echo "Apccontrol has done: ${APCUPSD} --killpower on UPS ${2}" | (${WALL} 2>/dev/null || cat)
              ;;
              commfailure)
              echo "Warning communications lost with UPS ${2}" | ${WALL}
              ;;
              commok)
              echo "Communications restored with UPS ${2}" | ${WALL}
              ;;
          #
          # powerout, onbattery, offbattery, mainsback events occur
          #   in that order.
          #
              powerout)
              ;;
              onbattery)
              echo "Power failure on UPS ${2}. Running on batteries." | ${WALL}
              ;;
              offbattery)
              echo "Power has returned on UPS ${2}..." | ${WALL}
              ;;
              mainsback)
              if [ -f /etc/apcupsd/powerfail ] ; then
                 printf "Continuing with shutdown."  | ${WALL}
              fi
              ;;
              failing)
              echo "Battery power exhausted on UPS ${2}. Doing shutdown." | ${WALL}
              ;;
              timeout)
              echo "Battery time limit exceeded on UPS ${2}. Doing shutdown." | ${WALL}
              ;;
              loadlimit)
              echo "Remaining battery charge below limit on UPS ${2}. Doing shutdown." | ${WALL}
              ;;
              runlimit)
              echo "Remaining battery runtime below limit on UPS ${2}. Doing shutdown." | ${WALL}
              ;;
              doreboot)
              echo "UPS ${2} initiating Reboot Sequence" | ${WALL}
              ${SHUTDOWN} -r now "apcupsd UPS ${2} initiated reboot"
              ;;
              doshutdown)
              echo "UPS ${2} initiated Shutdown Sequence" | ${WALL}
              ${SHUTDOWN} -h now "apcupsd UPS ${2} initiated shutdown"
              ;;
              annoyme)
              echo "Power problems with UPS ${2}. Please logoff." | ${WALL}
              ;;
              emergency)
              echo "Emergency Shutdown. Possible battery failure on UPS ${2}." | ${WALL}
              ;;
              changeme)
              echo "Emergency! Batteries have failed on UPS ${2}. Change them NOW" | ${WALL}
              ;;
              remotedown)
              echo "Remote Shutdown. Beginning Shutdown Sequence." | ${WALL}
              ;;
              startselftest)
              ;;
              endselftest)
              ;;
              battdetach)
              ;;
              battattach)
              ;;
              *)  echo "Usage: ${0##*/} command"
              echo "       warning: this script is intended to be launched by"
              echo "       apcupsd and should never be launched by users."
              exit 1
              ;;
          esac


# Default values for all apcupsd instances
apcupsd__instance_defaults:
  ### DEVICE CONFIGURATION
  # ---------------------------------------

  # Defines the type of cable connecting the UPS to your computer.
  #
  # Possible generic choices for <cable> are:
  #     simple, smart, ether, usb
  #
  #   Or a specific cable model number may be used:
  #     940-0119A, 940-0127A, 940-0128A, 940-0020B,
  #     940-0020C, 940-0023A, 940-0024B, 940-0024C,
  #     940-1524C, 940-0024G, 940-0095A, 940-0095B,
  #     940-0095C, 940-0625A, M-04-02-2000
  upscable: usb

  # To get apcupsd to work, in addition to defining the cable
  # above, you must also define a UPSTYPE, which corresponds to
  # the type of UPS you have (see the Description for more details).
  # You must also specify a DEVICE, sometimes referred to as a port.
  # For USB UPSes, please leave the DEVICE directive blank. For
  # other UPS types, you must specify an appropriate port or address.
  #
  # UPSTYPE   DEVICE           Description
  # apcsmart  /dev/tty**       Newer serial character device, appropriate for
  #                            SmartUPS models using a serial cable (not USB).
  #
  # usb       <BLANK>          Most new UPSes are USB. A blank DEVICE
  #                            setting enables autodetection, which is
  #                            the best choice for most installations.
  #
  # net       hostname:port    Network link to a master apcupsd through apcupsd's
  #                            Network Information Server. This is used if the
  #                            UPS powering your computer is connected to a
  #                            different computer for monitoring.
  #
  # snmp      hostname:port:vendor:community
  #                            SNMP network link to an SNMP-enabled UPS device.
  #                            Hostname is the ip address or hostname of the UPS
  #                            on the network. Vendor can be can be "APC" or
  #                            "APC_NOTRAP". "APC_NOTRAP" will disable SNMP trap
  #                            catching; you usually want "APC". Port is usually
  #                            161. Community is usually "private".
  #
  # netsnmp   hostname:port:vendor:community
  #                            OBSOLETE
  #                            Same as SNMP above but requires use of the
  #                            net-snmp library. Unless you have a specific need
  #                            for this old driver, you should use 'snmp' instead.
  #
  # dumb      /dev/tty**       Old serial character device for use with
  #                            simple-signaling UPSes.
  #
  # pcnet     ipaddr:username:passphrase:port
  #                            PowerChute Network Shutdown protocol which can be
  #                            used as an alternative to SNMP with the AP9617
  #                            family of smart slot cards. ipaddr is the IP
  #                            address of the UPS management card. username and
  #                            passphrase are the credentials for which the card
  #                            has been configured. port is the port number on
  #                            which to listen for messages from the UPS, normally
  #                            3052. If this parameter is empty or missing, the
  #                            default of 3052 will be used.
  #
  # modbus    /dev/tty**       Serial device for use with newest SmartUPS models
  #                            supporting the MODBUS protocol.
  upstype: usb
  device:

  # Interval (in seconds) at which apcupsd polls the UPS for status. This
  # setting applies both to directly-attached UPSes (UPSTYPE apcsmart, usb,
  # dumb) and networked UPSes (UPSTYPE net, snmp).
  polltime: 60

  # Normally standalone unless you share an UPS using an APC ShareUPS card
  upsclass: standalone

  # Normally disable unless you share an UPS using an APC ShareUPS card.
  upsmode: disable


  ### NETWORK CONFIGURATION
  # ---------------------------------------

  # Enables/Disables the network information server.
  # If netstatus is on, a network information
  # server process will be started for serving the STATUS and
  # EVENT data over the network (used by CGI programs).
  net_server: true

  # IP address on which NIS server will listen for incoming connections.
  net_server_address: 127.0.0.1

  # port to use for sending STATUS and EVENTS data over the network.
  net_server_port: 3551

  # By default, the size of the EVENTSFILE will be not be allowed to exceed
  # 10 kilobytes.  When the file grows beyond this limit, older EVENTS will
  # be removed from the beginning of the file (first in first out).  The
  # parameter EVENTSFILEMAX can be set to a different kilobyte value, or set
  # to zero to allow the EVENTSFILE to grow without limit.
  # EVENTSFILEMAX <kilobytes>
  eventsfilemax: 10


  ### HOOK CONFIGURATION
  # ---------------------------------------
  scripts: []

  # The ONBATTERYDELAY is the time in seconds from when a power failure
  #   is detected until we react to it with an onbattery event.
  #
  # This means that, apccontrol will be called with the powerout argument
  # immediately when a power failure is detected.  However, the
  # onbattery argument is passed to apccontrol only after the
  # ONBATTERYDELAY time.  If you don't want to be annoyed by short
  # powerfailures, make sure that apccontrol powerout does nothing
  # i.e. comment out the wall.
  onbatterydelay: 6

  #
  # Note: BATTERYLEVEL, MINUTES, and TIMEOUT work in conjunction, so
  # the first that occurs will cause the initation of a shutdown.
  #

  # If during a power failure, the remaining battery percentage
  # (as reported by the UPS) is below or equal to BATTERYLEVEL,
  # apcupsd will initiate a system shutdown.
  batterylevel: 5

  # If during a power failure, the remaining runtime in minutes
  # (as calculated internally by the UPS) is below or equal to MINUTES,
  # apcupsd, will initiate a system shutdown.
  minutes: 3

  # If during a power failure, the UPS has run on batteries for TIMEOUT
  # many seconds or longer, apcupsd will initiate a system shutdown.
  # A value of 0 disables this timer.
  #
  #  Note, if you have a Smart UPS, you will most likely want to disable
  #    this timer by setting it to zero. That way, you UPS will continue
  #    on batteries until either the % charge remaing drops to or below BATTERYLEVEL,
  #    or the remaining battery runtime drops to or below MINUTES.  Of course,
  #    if you are testing, setting this to 60 causes a quick system shutdown
  #    if you pull the power plug.
  #  If you have an older dumb UPS, you will want to set this to less than
  #    the time you know you can run on batteries.
  timeout: 0

  #  Time in seconds between annoying users to signoff prior to
  #  system shutdown. 0 disables.
  annoy: 300

  # Initial delay after power failure before warning users to get
  # off the system.
  annoydelay: 60

  # The condition which determines when users are prevented from
  # logging in during a power failure.
  # NOLOGON <string> [ disable | timeout | percent | minutes | always ]
  nologon: disable

  # If KILLDELAY is non-zero, apcupsd will continue running after a
  # shutdown has been requested, and after the specified time in
  # seconds attempt to kill the power. This is for use on systems
  # where apcupsd cannot regain control after a shutdown.
  # KILLDELAY <seconds>  0 disables
  killdelay: 0

  # PWRFAILDIR <path to powerfail directory>
  #   Directory in which to write the powerfail flag file. This file
  #   is created when apcupsd initiates a system shutdown and is
  #   checked in the OS halt scripts to determine if a killpower
  #   (turning off UPS output power) is required.
  # pwrfaildir:

  # NOLOGINDIR <path to nologin directory>
  #   Directory in which to write the nologin file. The existence
  #   of this flag file tells the OS to disallow new logins.
  nologindir: /run


  ### LOG CONFIGURATION
  # ---------------------------------------

  # This generates a lot of output, so if
  # you turn this on, be sure that the
  # file defined in syslog.conf for LOG_NOTICE is a named pipe.
  logstats: false

  # Time interval in seconds between writing the DATA records to
  # the log file. 0 disables.
  datatime: 0

  # FACILITY defines the logging facility (class) for logging to syslog.
  #          If not specified, it defaults to "daemon". This is useful
  #          if you want to separate the data logged by apcupsd from other
  #          programs.
  facility: daemon
