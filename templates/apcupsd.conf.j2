## apcupsd.conf v1.1 ##
{{ ansible_managed|comment(decoration='# ') }}

#
# ========= Device configuration parameters ============
#

UPSNAME {{ apcupsd__instance.upsname|d(apcupsd__instance.name) }}

UPSCABLE {{ apcupsd__instance.upscable }}
UPSTYPE {{ apcupsd__instance.upstype }}
DEVICE {{ apcupsd__instance.device }}

UPSCLASS {{ apcupsd__instance.upsclass }}
UPSMODE {{ apcupsd__instance.upsmode }}

POLLTIME {{ apcupsd__instance.polltime|int }}

LOCKFILE {{ apcupsd__runtime_directory|replace('%i', apcupsd__instance.name) }}

#
# ========= General configuration parameters ============
#
SCRIPTDIR {{ _apcupsd__instance_scriptdir }}

PWRFAILDIR /etc/apcupsd
NOLOGINDIR /etc

#
# ======== Configuration parameters used during power failures ==========
#

ONBATTERYDELAY {{ apcupsd__instance.onbatterydelay|int }}

# 
# Note: BATTERYLEVEL, MINUTES, and TIMEOUT work in conjunction, so
# the first that occurs will cause the initation of a shutdown.
#

# If during a power failure, the remaining battery percentage
# (as reported by the UPS) is below or equal to BATTERYLEVEL, 
# apcupsd will initiate a system shutdown.
BATTERYLEVEL 5

# If during a power failure, the remaining runtime in minutes 
# (as calculated internally by the UPS) is below or equal to MINUTES,
# apcupsd, will initiate a system shutdown.
MINUTES 3

# If during a power failure, the UPS has run on batteries for TIMEOUT
# many seconds or longer, apcupsd will initiate a system shutdown.
# A value of 0 disables this timer.
#
#  Note, if you have a Smart UPS, you will most likely want to disable
#    this timer by setting it to zero. That way, you UPS will continue
#    on batteries until either the % charge remaing drops to or below BATTERYLEVEL,
#    or the remaining battery runtime drops to or below MINUTES.  Of course,
#    if you are testing, setting this to 60 causes a quick system shutdown
#    if you pull the power plug.   
#  If you have an older dumb UPS, you will want to set this to less than
#    the time you know you can run on batteries.
TIMEOUT 0

#  Time in seconds between annoying users to signoff prior to
#  system shutdown. 0 disables.
ANNOY 300

# Initial delay after power failure before warning users to get
# off the system.
ANNOYDELAY 60

# The condition which determines when users are prevented from
# logging in during a power failure.
# NOLOGON <string> [ disable | timeout | percent | minutes | always ]
NOLOGON disable

# If KILLDELAY is non-zero, apcupsd will continue running after a
# shutdown has been requested, and after the specified time in
# seconds attempt to kill the power. This is for use on systems
# where apcupsd cannot regain control after a shutdown.
# KILLDELAY <seconds>  0 disables
KILLDELAY 0

#
# ==== Configuration statements for Network Information Server ====
#
NETSERVER {{ apcupsd__instance.net_server|ternary('on', 'off') }}

{% if apcupsd__instance.net_server %}
NISIP {{ apcupsd__instance.net_server_address }}
NISPORT {{ apcupsd__instance.net_server_port|int }}
{% endif %}

EVENTSFILE {{ apcupsd__logs_directory }}/{{ apcupsd__instance.name }}.events
EVENTSFILEMAX {{ apcupsd__instance.eventsfilemax|int }}

#
# ===== Configuration statements to control apcupsd system logging ========
#
STATTIME 0
STATFILE {{ apcupsd__lib_directory }}/{{ apcupsd__instance.name }}.status

LOGSTATS {{ apcupsd__instance.logstats|ternary('on', 'off') }}

DATATIME {{ apcupsd__instance.datatime }}

FACILITY {{ apcupsd__instance.facility }}
